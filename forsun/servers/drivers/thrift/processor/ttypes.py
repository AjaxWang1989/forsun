#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


from tornado import gen

class ForsunPlanError(TException):
    """
    Attributes:
     - code
     - message
    """

    thrift_spec = (
        None, # 0
        (1, TType.I16, 'code', None, None, ), # 1
        (2, TType.STRING, 'message', None, None, ), # 2
    )

    def __init__(self, code=None, message=None,):
        self.code = code
        self.message = message

    @gen.coroutine
    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        yield gen.Task(iprot.readStructBegin)
        while True:
            (fname, ftype, fid) = yield gen.Task(iprot.readFieldBegin)
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.code = yield gen.Task(iprot.readI16)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = yield gen.Task(iprot.readString)
                else:
                    yield gen.Task(iprot.skip,ftype)
            else:
                yield gen.Task(iprot.skip,ftype)
            yield gen.Task(iprot.readFieldEnd)
        yield gen.Task(iprot.readStructEnd)

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ForsunPlanError')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I16, 1)
            oprot.writeI16(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return


    def __str__(self):
      return repr(self)

    def __repr__(self):
      L = ['%s=%r' % (key, value)
        for key, value in self.__dict__.iteritems()]
      return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ForsunPlan:
    """
    Attributes:
     - is_time_out
     - key
     - second
     - minute
     - hour
     - day
     - month
     - week
     - next_time
     - status
     - count
     - current_count
     - last_timeout
     - action
     - params
    """

    thrift_spec = (
        None, # 0
        (1, TType.BOOL, 'is_time_out', None, None, ), # 1
        (2, TType.STRING, 'key', None, None, ), # 2
        (3, TType.I16, 'second', None, None, ), # 3
        (4, TType.I16, 'minute', None, -1, ), # 4
        (5, TType.I16, 'hour', None, -1, ), # 5
        (6, TType.I16, 'day', None, -1, ), # 6
        (7, TType.I16, 'month', None, -1, ), # 7
        (8, TType.I16, 'week', None, -1, ), # 8
        (9, TType.I32, 'next_time', None, None, ), # 9
        (10, TType.I16, 'status', None, 0, ), # 10
        (11, TType.I16, 'count', None, 0, ), # 11
        (12, TType.I16, 'current_count', None, 0, ), # 12
        (13, TType.I32, 'last_timeout', None, 0, ), # 13
        (14, TType.STRING, 'action', None, "shell", ), # 14
        (15, TType.LIST, 'params', (TType.STRING,None), [
        ], ), # 15
    )

    def __init__(self, is_time_out=None, key=None, second=None, minute=thrift_spec[4][4], hour=thrift_spec[5][4], day=thrift_spec[6][4], month=thrift_spec[7][4], week=thrift_spec[8][4], next_time=None, status=thrift_spec[10][4], count=thrift_spec[11][4], current_count=thrift_spec[12][4], last_timeout=thrift_spec[13][4], action=thrift_spec[14][4], params=thrift_spec[15][4],):
        self.is_time_out = is_time_out
        self.key = key
        self.second = second
        self.minute = minute
        self.hour = hour
        self.day = day
        self.month = month
        self.week = week
        self.next_time = next_time
        self.status = status
        self.count = count
        self.current_count = current_count
        self.last_timeout = last_timeout
        self.action = action
        if params is self.thrift_spec[15][4]:
          params = [
        ]
        self.params = params

    @gen.coroutine
    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        yield gen.Task(iprot.readStructBegin)
        while True:
            (fname, ftype, fid) = yield gen.Task(iprot.readFieldBegin)
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.is_time_out = yield gen.Task(iprot.readBool)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.key = yield gen.Task(iprot.readString)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.second = yield gen.Task(iprot.readI16)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.minute = yield gen.Task(iprot.readI16)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.hour = yield gen.Task(iprot.readI16)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.day = yield gen.Task(iprot.readI16)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 7:
                if ftype == TType.I16:
                    self.month = yield gen.Task(iprot.readI16)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.week = yield gen.Task(iprot.readI16)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.next_time = yield gen.Task(iprot.readI32)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 10:
                if ftype == TType.I16:
                    self.status = yield gen.Task(iprot.readI16)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 11:
                if ftype == TType.I16:
                    self.count = yield gen.Task(iprot.readI16)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 12:
                if ftype == TType.I16:
                    self.current_count = yield gen.Task(iprot.readI16)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.last_timeout = yield gen.Task(iprot.readI32)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.action = yield gen.Task(iprot.readString)
                else:
                    yield gen.Task(iprot.skip,ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype3, _size0) = yield gen.Task(iprot.readListBegin)
                    for _i4 in xrange(_size0):
                        _elem5 = yield gen.Task(iprot.readString)
                        self.params.append(_elem5)
                    yield gen.Task(iprot.readListEnd)
                else:
                    yield gen.Task(iprot.skip,ftype)
            else:
                yield gen.Task(iprot.skip,ftype)
            yield gen.Task(iprot.readFieldEnd)
        yield gen.Task(iprot.readStructEnd)

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ForsunPlan')
        if self.is_time_out is not None:
            oprot.writeFieldBegin('is_time_out', TType.BOOL, 1)
            oprot.writeBool(self.is_time_out)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 2)
            oprot.writeString(self.key)
            oprot.writeFieldEnd()
        if self.second is not None:
            oprot.writeFieldBegin('second', TType.I16, 3)
            oprot.writeI16(self.second)
            oprot.writeFieldEnd()
        if self.minute is not None:
            oprot.writeFieldBegin('minute', TType.I16, 4)
            oprot.writeI16(self.minute)
            oprot.writeFieldEnd()
        if self.hour is not None:
            oprot.writeFieldBegin('hour', TType.I16, 5)
            oprot.writeI16(self.hour)
            oprot.writeFieldEnd()
        if self.day is not None:
            oprot.writeFieldBegin('day', TType.I16, 6)
            oprot.writeI16(self.day)
            oprot.writeFieldEnd()
        if self.month is not None:
            oprot.writeFieldBegin('month', TType.I16, 7)
            oprot.writeI16(self.month)
            oprot.writeFieldEnd()
        if self.week is not None:
            oprot.writeFieldBegin('week', TType.I16, 8)
            oprot.writeI16(self.week)
            oprot.writeFieldEnd()
        if self.next_time is not None:
            oprot.writeFieldBegin('next_time', TType.I32, 9)
            oprot.writeI32(self.next_time)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I16, 10)
            oprot.writeI16(self.status)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I16, 11)
            oprot.writeI16(self.count)
            oprot.writeFieldEnd()
        if self.current_count is not None:
            oprot.writeFieldBegin('current_count', TType.I16, 12)
            oprot.writeI16(self.current_count)
            oprot.writeFieldEnd()
        if self.last_timeout is not None:
            oprot.writeFieldBegin('last_timeout', TType.I32, 13)
            oprot.writeI32(self.last_timeout)
            oprot.writeFieldEnd()
        if self.action is not None:
            oprot.writeFieldBegin('action', TType.STRING, 14)
            oprot.writeString(self.action)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 15)
            oprot.writeListBegin(TType.STRING, len(self.params))
            for iter6 in self.params:
                oprot.writeString(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.is_time_out is None:
          raise TProtocol.TProtocolException(message='Required field is_time_out is unset!')
        if self.key is None:
          raise TProtocol.TProtocolException(message='Required field key is unset!')
        if self.second is None:
          raise TProtocol.TProtocolException(message='Required field second is unset!')
        if self.next_time is None:
          raise TProtocol.TProtocolException(message='Required field next_time is unset!')
        return


    def __repr__(self):
      L = ['%s=%r' % (key, value)
        for key, value in self.__dict__.iteritems()]
      return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
